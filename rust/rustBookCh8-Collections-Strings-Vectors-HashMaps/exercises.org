* q1
    Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list. 
   
** list 
[20, 6, 2, 1, 16, 14, 2, 2, 19, 5, 9, 4, 1, 10, 3, 1, 12, 2, 7, 10, 17, 14, 3, 5, 10, 7, 1, 8, 7, 16, 5, 0, 12, 3, 0, 18, 6, 6, 8, 3]
** code
:PROPERTIES:
:header-args:rust: :tangle ./ch8-exercises/src/main.rs
:END:
#+begin_src rust
// in rust this would be an array
fn main() {
list = [20, 6, 2, 1, 16, 14, 2, 2, 19, 5, 9, 4, 1, 10, 3, 1, 12, 2, 7, 10, 17, 14, 3, 5, 10, 7, 1, 8, 7, 16, 5, 0, 12, 3, 0, 18, 6, 6, 8, 3];

let v: Vec<i32> = Vec::new();

for elem in list {
    v.push(elem);
}

println!("{:?}",v);
}
// pseudocode:
// 1.) sort the list
// 2.) find the most common value (by number of times)

// 1.) 
//  I think there's a sort operation by default?
//   use an incrementing hash map thing as described in ch8-3
    
#+end_src

* q2
    Convert strings to pig latin. 
 The first consonant of each word is moved to the end of the word and “ay” is added, so “first” becomes “irst-fay. 
” Words that start with a vowel have “hay” added to the end instead (“apple” becomes “apple-hay”). 
 Keep in mind the details about UTF-8 encoding!
    
* q3
    Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company. 
 For example, “Add Sally to Engineering” or “Add Amir to Sales. 
” Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically. 


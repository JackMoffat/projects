* Common Collections
- collections:
  - data structures
  - can contain multiple /values/
  - are stored on the heap
    - this is not like array and tuples
    - therefore size does not need to be known at compile time
    - collections can grow or shrink throughout the program
- What this chapter will cover:
  1. vector -> allow for storing variable number of values "next to eachother?"
  2. string -> collection of characters, mentioned previously, will cover more deeply here
  3. hash map -> Allow to associate a value with a particular key. These are a specific implementation of a more general data structure called a /map/

* 8.1 - storing list of values with vectors
:PROPERTIES:
:header-args:rust: :tangle ./ch8-1/src/main.rs
:END:
** creating new vectors
- below we declare v to be a vector that will hold values of type i32
- Vec is provided by standard library, and can hold any type
- Rust can usually infer the type of values it's supposed to hold when it is created, but below we give it the certain types
  
#+begin_src rust
let v: Vec<i32> = Vec::new();
#+end_src

- using the ~vec!~ macro can create a ~Vec<T>~ with initial values of type inferred by the values given
#+begin_src rust
let v = vec![1, 2, 3];
#+end_src

** updating a vector
- update using the ~push~ method, assuming the vector was declared as mutable
- ah, so at first the empty vector can be declared /without/ declaring the type of the elements that will go within it
#+begin_src rust
let mut v  = Vec::new();
v.push(5);
v.push(6);
v.push(7);
v.push(8);
#+end_src

** Dropping A Vector Drops Its Elements
- just like with other ~struct~, v will be freed when it leaves scope
- dropping a vector drops ALL of its elements
#+begin_src rust
{
let v = vec![1, 2, 3, 4];
// do stuff with v


} // v is out of scope here, and is freed
#+end_src

** reading elements of vectors
- in the examples below, types are annotated for extra clarity
- two main ways of accession a vector's elements, indexing and ~get~
- below, we use the & syntax here so that we don't take ownership of the value. The type here is being annotated as well for clarity, but the annotation of the type itself is not the one that matters
#+begin_src rust
let v = vec![1, 2, 3, 4, 5];

let third: &i32 = &v[2]; // borrowing the second element - would ownership be capable of changing to third without &?
println!("third element is {}", third);

match v.get(2) {
    Some(third) => println!("the third element of v is {}", third),
    None => println!("There is no third element.")
}
#+end_src
- ah, we then need to use ~match~ with ~v.get~ in order to handle the cases of whether v has a third element or not -> I had forgotten this syntax

*** Specifics of what the access methods return
- the purpose of having these different access methods is to control what happens when you try to access an element of a vector that does not exist.
- using ~&~ and ~[]~ gives us a reference.
  - Attempting to access an element beyond the end of the vector will cause the program to panic and crash using this method. 
- ~get~ returns an ~Option<&T>~ which we then process using ~match~
  - attempting to access an element beyond the end of the vector will execute some logic coded in for when ~None~ is returned.
  - this method is more useful when you expect to commonly encounter requests beyond the range of the vector under normal operating conditions
  - this is often more user-friendly 

**  borrow checker will still enforce ownership rules
- the code below will not work
- ~v~ is declared as mutable, but an immutable /reference/ to an element of ~v~ is created when ~first~ is declared.
- we ARE then able to push to ~v~, but this does so as a mutable borrow
- we cannot have a mutable and immutable reference in the same scope. the borrow rules in ch.4 cover this scenario.
- when we then refer to our immutable reference ~first~, the problem is created
#+begin_src rust
let mut v = vec![1, 2, 3, 4, 5];
let first = &v[0]; // immutable borrow

v.push(6); // mutable borrow

println!("elem 1 is {}", first); // immutable borrow later USED here <- this is where the problem occurs
#+end_src
- the reason for this behavior is that while a reference to an earlier position should not be affected by pushing an element on to the end of a vector, it may have an effect at the level of how vectors are actually created. Adding to the end of the vector may require allocation of new memory and copying the elements to the new space if there is not room where the vector was originally stored. This would then cause the reference to first to refer to deallocated memory. (semi-quoted from rust book)

** Iterating over values in a vector
- ~for~ loops can be used to access the elements of vectors
- this can be done in a mutable or immutable fashion
- either way, ~&~ is used first to borrow the thing
#+begin_src rust
// immutable
{
    let v = vec![100, 37, 5555];
    for i in &v {
        println!("{}", i);
    }
}

{
    let mut v = vec![50, 40, 10, 30, 20];
    for i in &mut v {
        ,*i += 50;
    }
}
#+end_src

*** ~*~ is the Deference operator
- the deference operator ~*~ is used to get the value in ~i~ so that we can then use the ~+=~ operator
- dereferencing will be covered more in ch.15

** using an enum to store multiple types
- vectors can only store values of the same type
- it is often useful to be able to store values of different types
- what we /can/ do is use an ~enum~ with a  ~variant~ for each type of data we expect our variable-type-and-length vector to store
- the variants of an ~enum~ are all considered the same tpye
#+begin_src rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}
let row = vec![
    SpreadsheetCell::Int(3),
    SpreadsheetCell::Text(String::from("blue")), // here we use the String::from method to create a..... ah, string literals vs strings! some would return &String and some would return &str
    SpreadsheetCell::Float(10.12),
];
#+end_src
- using an ~enum~ in this way, plus a similar ~match~ construct on the other end, allows us to use the rust compiler to ensure that every possible case is handled.
- This can be done when you know all of the possible types that could be included in the vector
- if you don't know all of the possible types, you can use a trait object. These will be covered in Ch. 17

** End
- there are many more methods available to the ~Vec<T>~ (type?), for instance ~pop~
- the  [[https://doc.rust-lang.org/std/vec/struct.Vec.html][API docs]] have more information on these.

* 8.2 - strings

** Key points
- ~String~ vs ~str~
- string literals
- appending and updating ~String~
-
  
  
** String::from and "<x>".to_string()  both create ~String~ from a string literal

** s.push() can only append single character to a ~String~
- characters are specified inside single quotes
- 

** concatenation: ~+~ operator or ~format!~ macro
Listing 8-18 shows a good example of 

*** Look below listing 8-18 to see what the ~fn add()~ is doing
 - the version shown here is not the exact signature - concrete types have been inserted for clarity
 - we can't add two ~String~, we can add a /reference/ (because ~&~) to a string
 - in this example however, we originally add ~&String~ not ~&str~ as expected
 - this is where /deref coercion/ comes in -> this is applied by the compiler
   - will be discussed further in a far off chapter (15)
 - ~s3~ takes ownership of ~s1~ and so ~s1~ becomes invalid, but ~s2~ is still valid
 - something about this implementation means many fewer copies of strings are created, rendering it much more efficient
   
*** ~+~ macro can get unwieldly with larger concatenations

*** ~format!~ macro is much more clear
#+begin_src rust
let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");

// with add -> note references being used on second and third
let s = s1 + "-" + &s2 + "-" + &s3;
let s = format!("{}-{}-{}", s1, s2, s3);

#+end_src
- ~format!~ works like ~println!~, but ~format!~ returns a ~String~ whereas ~println!~ prints to stdout
- ~format!~ also only takes references to the strings
  - therefore all input strings remain valid
    - this occurs even though we don't pass in parameters with ~&~ (because it's a macro?)

** indexing into strings
- indexing into strings in the normal fashion does not work in rust
#+begin_src rust
let s1 = String::from("HELLO!");
let h = s1[0];
#+end_src
- this will yield a result saying that the trait 'Index<{integer}>' is not implemented for 'String'

*** Why not? The length of unicode-encoded strings
- What a ~String~ actually is is a wrapper around a ~Vec<u8>~
#+begin_src rust
let hello1 = String::from("Hola");

let hello2 = String::from("Здравствуйте");
let answer = &hello2[0];
#+end_src
- the ~len~ of hello1 is 4 -> the vector storing "Hola" is 4 bytes long, and each letter takes one byte when UTF-8 encoded
- hello2, on the otherhand, appears to be 12 bytes long but is in fact 24 -> each "unicode scalar value" in hello2 takes two bytes of storage
- what this ends up to mean is that simple indexing into strings does not guarantee that a character will actually be accessed.
- if we look at ~answer~, it would naively suggest that ~answer~ would be ~З~ 
- when UTF-8 encoded, however, the first byte of  ~З~ is =208= and the second is =151=
- this would not even return =208=, because on it's own =208= is invalid as it is a two-byte encoding
- even with something simpler like ~&"hello"[0]~ would not return =h=, it would return =104=
- rust prevents this from occurring at the compiler stage

*** Bytes and scalar values and grapheme clusers ....oh my....
- There are three ways within UTF-8 that we could choose to look at characters
  1. as bytes
  2. as scalars
  3. as grapheme clusters (similar to letters, depending on the language)

**** Example

- “नमस्ते” is a word in Devanagari script.
- it is stored as a ~Vec<u8>~. If we look at it:
  1. as bytes : [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]
     - 18 bytes, none of which are what we want
  2. as Unicode scalar values (Rust's =char= type) :  ['न', 'म', 'स', '्', 'त', 'े']
     - characters 4 and 6 aren't even letters on their own
  3. grapheme clusters : ["न", "म", "स्", "ते"]
     - THESE are the "letters" that make up the word

** Slicing strings
- indexing into strings doesn't clarify whether the indexing should be based on a byte value, a character, a grapheme cluster, or a string-slice, and what it's return type should therefore be
- "if you really need to use indices to create string slices, therefore", Rust wants you to be more specific.
- you'll be asked to specify what the correct char boundary should be
#+begin_src rust

let hello = "Здравствуйте";

let s = &hello[0..4]; // works
let s = &hello[0..1]; // does not work, panics with char boundary similar to accessing an index outside the length of a vector
#+end_src

** methods for iterating over characters 
- best practice: specify whether you want characters or bytes
- getting grapheme clusters is too complex for the standard library, these functions are provided by crates
#+begin_src rust
for c in "नमस्ते".chars() {
    println!("{}", c);
}
#+end_src

outputs the characters न म स ् त े

#+begin_src rust
for b in "नमस्ते".bytes() {
    println!("{}", b);
}

#+end_src
- whereas this will print the 18 individual bytes that compose the string

** Summary
Strings are complicated
- what this means in rust is that more thought around UTF8 characters is required up-front, but this yields a safer program

* 8.3 - Hash Maps
:PROPERTIES:
:header-args:rust: :tangle ./ch8-3/src/main.rs
:END:
- hash maps store a map of keys (type ~K~) to values (type ~V~) through the use of a hashing function
- lots of languages implement this functionality, but it is often called something similar like =hash, map, object, hjash table, dictionary, associative array=
- type ~HashMap<K, V>~
- Hash maps allow you to use a key of any type to look up an associated value, without relying on an index
- standard library has a lot of extra great info on hash maps and related functions
** Creating a new hash map - example of sports scores
- import hash map
- we then create a new mutable hash map called ~scores~
- then, we use the ~insert()~ method to add a ~String~ key with an associated ~i32~ score for each team 
#+begin_src rust
use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);
#+end_src
- hash maps store their data on heap
- and like vectors, /hash maps are homogenous/ - all ~K~ must be of the same type, and all ~V~ must be of the same type

*** construction from an iterator
- wooh, there's a lot going on in this example!!
#+begin_src rust
let teams = vec![String::from("Blue"), String::from("Yellow")];
let initial_scores = vec![10, 50];


let mut scores: HashMap<_, _> =
    teams.into_iter().zip(initial_scores.into_iter()).collect();
#+end_src
- so, first we:
  1. create a ~Vec<String>~ and a ~Vec<i32>~ using the ~vec!~ macro
  2. we then declare a variable ~scores~ and type annotate it ~HashMap<_, _>~
     - type annotation is /required/ for the ~collect()~ method because ~collect()~ can be used on diverse data structures
     - the ~<_, _>~ syntax allows Rust to infer the type of ~K,V~ in the  ~HashMap~ from the type of the ~Vec~ inputs
- Additional components of this thing
  1. We send the teams vec into some other state by using ~into_iter()~ -> what does ~into
  2. how does the ~.zip()~ work with it?
     - from docs, ~zip()~ takes two iterators into a single iterator of pairs
     - the first parameter in ~zip~ is ~self~ -> therefore since the method is called on ~teams~, that is the first element in the resulting tuple
     - second parameter is the iterator that will be zipped to the first
  3. now ~.collect()~ is what turns that zipped double-iterator thing from a (iterator or tuple?) into a ~HashMap~
 
** Hash maps and ownership
#+begin_src rust
use std::collections::HashMap;

let field_name = String::from("Favorite Color");
let field_value = String::from("blue");

let mut map = HashMap::new();
map.insert(field_name, field_value); // here, field_name and field_value ownership transfer into map
#+end_src
- above, we've inserted actual values into the hash map
- if we were to insert references instead, the values they refer to would remain outside, but must remain valid for at leastr as long as the  hash map. This we will cover more in ch. 10

** Accessing values in a hash map
- the ~get()~ method can be used to get values from a hash map
#+begin_src rust
 use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("blue"), 10);
scores.insert(String::from("yellow"), 50);

let team_name = String::from("blue");
let score = scores.get(&team_name); // borrow syntax to access score

// accessing using a reference via &
for (key, value) in &scores {
    println!("{}:{}", key, value);
}
#+end_src
- when we access ~score~, we get back the type ~Some(&i10)~
- this is because get returns an ~Option<&V>~
- what this allows is for us to cover the behavior for the case in which a value is requested from a hashmap that is not actually in the map
- iterating over a hash map will print pairs in an arbitrary order, because the hash map is not ordered?

** updating a hash map
- HashMaps can grow
- each Key can only have one Value associated with it at a time, but this can be updated. You could:
  - replace the old value
  - keep the old value and only add a new value if the key does not already have a value
  - combine the old and new values

*** overwriting a value
#+begin_src rust
use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Blue"), 25);

println!("{:?}", scores); // reminder of the debug syntax for diplay trait
#+end_src
- pretty straightforward

*** only inserting a value if the key has no value
#+begin_src rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);

// here we use the 'entry' method

scores.entry(String::from("Yellow")).or_insert(50);
scores.entry(String::from("Blue")).or_insert(50);

println!("{:}", scores);
#+end_src

* Using structs to structure related data
- so, it says that some of the best things about structs are the methods and type checking that go along with them
- 
* 5.1 defining and instantiating structs
  :PROPERTIES:
  :header-args:rust: :tangle ./src/main.rs
  :END:
#+name: open-main
#+begin_src rust
fn main() {

#+end_src

**  Structs: More flexible than tuples
  - every value is named
  - these named values make up the struct's /fields/

#+begin_src rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}



let user1 = User {
    email: String::from("abc@123.com.ru.rs.sc.am.y.ou"), 
    username: String::from("someone"),
    active: true,
    sign_in_count: 1,
};
#+end_src
- Note that the lines between struct fields are separated by commas, because it isn't a statement(";") or expression("<nothing>")

  

** mutability
 - either all of the instance of a struct is mutable, or none of it is.
 - you can't declare individual fields to be mutable
#+begin_src rust

let mut user1 = User {
    email: String::from("abc@123.com.ru.rs.sc.am.y.ou"), 
    username: String::from("someone"),
    active: true,
    sign_in_count: 1,
};
// now it can be mutated
user1.email = String::from("abababa@example.com");
#+end_src
#+end_src
** using a function
   - In the build_user function below, having the User{} part as the last *expression* (aka no semicolon) of the function means (implicitly) that it is the value to be returned
    #+begin_src rust
fn build_user(email: String, username: String) -> User {
    User {
        email: email,
        username: username,
        active: true,
        sign_in_count: 1,
    }
}
    #+end_src
** Ok, now the field init shorthand!!!!!!!!!!
   - As long as the named parameters in a function that instantiates a struct are the same as the struct's fields, you can use the ~field init shorthand~ syntax
   - saves time, less repetitive
   - Also, syntactically, you can give the last line a comma
   #+begin_src rust
fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}
   #+end_src
- so above, some of the fields are done by field init and the others are instantiated within the function
** ~Struct Update~ syntax: creating instances from other instances
*** With and Without ~Struct update~ syntax
    #+begin_src rust
// without Struct Update syntax - manually declaring values
// let user2 = User {
//     active: user1.active,
//     username: user1.username,
//     email: String::from("another@example.com"),
//     sign_in_count: user1.sign_in_count,
// };

// With Struct update syntax - showing how fields not explicitly set should take their values from the given other instance
    // BUT! below no es bueno because the ownership of user1's "username" value was not transferred
let user2 = User {
    email: String::from("jack@jack.com"),
    ..user1
};

    #+end_src
**** SERIOUSLY important information re: above
     - OK: I think it is because the email and username fields are of =String= type, they therefore aren't string literals
     - aka since they're not string literals, they are just pointers to the same
     - I tried a few things to make it work but no bueno so far. Not sure why you'd ever want the use case where you could still have it in scope in a different User object, though
     - importantly, the user2 example above *moves* the ownership of user1's ~username~ field into user2
     - it is therefore out of scope for user
** Using Tuple Structs w/o named fields to create different types
   - Ok, so the below is useful/important because now there are different types for two different pieces of data that would otherwise share the exact same structure
   - this way, functions that are supposed to take structs of type =Color= won't work if given a type =Point=
  #+begin_src rust
struct Color(i32,i32,i32);
struct Point(i32,i32,i32);

let black = Color(0,0,0);
let origin = Point(0,0,0);
  #+end_src
** unit-like structs without any fields
   - These behave similarly to ~()~ (c.f. ch3.2)
   - "Useful in situations in which you need to implement a trait on some type but don;t have any data taht you want to store inthe type itself"
   #+begin_src rust
struct AlwaysEqual;
let subject = AlwaysEqual;
   #+end_src
   - implications of this will be covered more in ch. 10
** Ownership of struct data
   - this box is talking more about stuff we'll go into more depth in later
   - This is important, but I don't wnat to type it out right now so here's the link
   - [[https://doc.rust-lang.org/book/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax][go to the bottom of the page]]  
** close main
#+name: close-main
#+begin_src rust
}
#+end_src
* 5.2 example program using structs
  :PROPERTIES:
  :header-args:rust: :tangle ./src/main.rs
  :END:
#+name: open-main
#+begin_src rust
fn main() {

#+end_src
** beginning of the thing, without structs
  "we'll start with a single variable, and then refactor until we're using structs instead"
  #+begin_src rust
let width1 = 30;
let height1 = 50;

println!(
    "the area of the rectangle is {} square pixels",
    area(width1, height1)
);

fn area(width: u32, height: u32) -> u32 {
    width * height
}
  #+end_src
- There are some interesting design points in this section
- they say that "the area function is supposed to calculate the area of one rectangle, but we've wrote a function with two parameters"
- since the parameters are related, eg they always only describe one rectangle, it would be better practice for legibility to group them together
** grouping using tuples
  #+begin_src rust
let rect1 = (30, 50);
println!(
    "the area of the rectangle is {} square pixels",
    area(width1, height1)
);

fn area(dimensions: (u32, u32)) -> u32 {
    dimensions.0 * dimensions.1
}
  #+end_src
  - so, this is more structured but is also in a way less clear
  - tuples don't name their fields
  - so it's simple in this example, but would get very complicated in others
** refactoring with structs
   #+begin_src rust
struct Rectangle {
    width: u32,
    height: u32,
}

let rect1 = Rectangle {
    width: 30,
    height: 50,
};

println!(
    "The rectangle's area is: {} square pixels",
    area(&rect1)
);

fn area(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}
   #+end_src
   - ok cool, so here we make the rectangle struct and then create an instance of it.
   - when we call the area function on it, we *borrow* the instance rect1
   - the area function defined knows to expect a *borrowed* Rectangle struct
     - this parameter in the area function is further defined to be an *immutable borrow*
   - this is definitely more clear, as we can then call rectangle.width and rectangle.height
   
** Adding useful functionality with derived traits
   - so, we can't currently print a rect1 struct
   - we need to define a Display formatting
   - we would ALSO need to define a Debug formatting for our new struct Rectangle
   - adding the debugging is easy -> you effectively have to opt in
   #+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
    }
fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
        };
    // prints the whole structure
    println!("rect1 is {:?}",rect1); 
    // prints it in a line-by-line way
    println!("rect1 is {:#?}",rect1);
    }
    #+end_src
    - debug (called by ~{:?}~) effectively allows the entire instance to be printed as it is defined in the code
    - shows all fields of the instance
    - with larger structs we can use ~{:#?}~ and fields will all be printed on separate lines
      
** dbg! macro
- ~dbg!~ macro:
  - takes ownership of an expression
  - prints the file and line number where the ~dbg!~ macro was
  - prints the value of the expression
  - returns ownership of the value
  - then prints this value to the ~stderr~ stream
- this printing to ~stderr~ is different from how println! prints to ~stdout~
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30*scale),
        height: 50,
    };
    dbg!(&rect1);
}
#+end_src
- in the example above, we can use ~dbg!~ within the assignment to rect1's width because after printing, it will return the value of the expression!
  - so, you can look at what's going on without interfering with the assignment of the value
    
** next section
- the ~area~ function for the rectangle is very specific, so in the next section we'll turn it into a =method= on the Rectangle struct
** close main
#+name: close-main
#+begin_src rust
}
#+end_src
* 5.3 method syntax
Methods:
- similar to functions
- are named, declared with fn, take parameters, return a value
- One big difference is that they are initially called with ~impl~, and their first parameter is always ~self~

  
** defining methods 
#+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    heigt: u32,
}



// here we used impl to apply this new method to an existing struct
impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
    fn width(&self) -> bool {
        self.width > 0
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The are of the rectangle is {} square pixels",
        rect1.area() // this now works instead of the previous method of having a separate function
    );
    if rect1.width() {
        println!("rectangle has a nonzero width of {}", rect1.width);
    }

}
#+end_src
** ~&self~
- What the &self is actually short for is ~self: &Self~
- it is an alias for whatever type that the ~impl~ block is being applied on
- parameter's *name* is ~self~, *type* is ~Self~
- we still need to use ~&~ to borrow the Self instance
- methods are capable of:
  - taking ownership of self
  - immutably borrowing self (what we did here)
  - mutably borrowing self
- we use &self here because we only need to borrow the struct to read the data
- if we wanted it to be mutable, we'd use ~&mut self~ for the first param
- it is rare that we would want to just use ~self~ as the first parameter to take ownership of the funtion by a method
- usually if used, it is to transform an instance and prevent access to it's original form
** interesting little note on width as bool
   - in the implementation of the width part, we've named the method ~width()~ the same as the parameter ~width~
   - technically you can make the method of ~width~ do whatever you want., BUT
   - often implentations of methods that have the same name as a trait will only return the trait's value and nothing else, these are called *Getters*
*** Why are getters useful?
    - often getters are used because you can make the field itself (~width~) private, but the method (~width()~) public.
    - this allows for read-only access to the value -> we will discuss more in ch7
** more benefits of methods
- it's nice not having to manually write the type of whatever different struct you are calling on
- it keeps functionality that should be associated only with
** Automatic referencing and dereferencing: Rust as compared to C/C++
   - C/C++ have two different method access syntaxes: ~.~, for when called on object directly, and ~->~ for when you need to dereference a pointer to access the object
   - rust has no ~->~ operator and instead makes use of *automatic referencing and dereferencing*
*** how it works
    - If you call a method by ~object.something()~, rust will add one of ~&, &mut, *~ to make ~object~ match the *signature* of the method
    #+begin_src rust :tangle no
p1.distance(&p2);
(&p1).distance(&p2);
    #+end_src
    - so, the two examples above are the same but the first looks cleane
    - "Given the receiver and the name of a method, rust can figure out definitively whether the method is..."
    | reading   | ~&self~     |
    | mutating  | ~&mut self~ |
    | consuming | ~self~      |
** methods with more parameters
   Here we practice making a method that checks whether a given =Rectangle= can fit within another =Rectangle=
   - point being methods can take other parameters by adding to signature after self
   #+begin_src rust
#[derive(Debug)]
struct Rectangle {
    width: u32,
    heigt: u32,
}



// here we used impl to apply this new method to an existing struct
impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
    fn width(&self) -> bool {
        self.width > 0
    }

    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }

}
fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };

    println!("can rect1 hold rect2? {}", rect1.can_hold(&rect2));
    println!("can rect1 hold rect3? {}", rect1.can_hold(&rect3));
}
   #+end_src
** associated functions
   - All functions defined within ~impl~ blocks are called *associated functions* - they are associated with the ~type~ getting the ~impl~
   - BUT! it is possible to define associated functions *that are not methods*: that don't have ~&self~ as the first parameter
   - this sort of function would not need an instance of the type to work with
  #+begin_src rust
impl Rectangle {
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size,
            height: size
        }
    }
}
  #+end_src
*** Calling these associated functions
    To call these associated functions we use ~::~ syntax (ex src_rust[:tangle no :eval no]{let sq = Rectangle::square(3);})
    - "the ~::~ syntax is used for both associated functions and for namespaces created by =modules=" <- more on modules in ch.7
** multiple ~impl~ blocks
   It is possible to have multiple ~impl~ blocks, though this is usually entirely equivalent.
   Multiple ~impl~ blocks are more useful when working with ?generic types/traits? <- in ch.10
** Next up:
   Next up in ch. 6 we will talk about ~enum~ -> another way to create custom types
